/*
  Viewport for X-large, Large, medium and small screens.
  Break point logic check for viewports 578px, 768px, 992px, 1200px
  and break-point value is obtained.
  Use breakpoint in CSS media query.
  Warns if breakpoint is invalid
*/

@mixin respond-below($breakpoint) {
  @if (map-has-key($breakpoints, $breakpoint)) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    @media (max-width: $breakpoint-value) {
      @content;
    }
  } @else {
    @warn 'Inavlid breakpoint: #{$breakpoint}';
  }
}

@mixin respond-between($breakpoint1, $breakpoint2) {
  @if (
    map-has-key($breakpoints, $breakpoint1) and
      map-has-key($breakpoints, $breakpoint2)
  ) {
    $breakpoint-value1: map-get($breakpoints, $breakpoint1);
    $breakpoint-value2: map-has-key($breakpoints, $breakpoint2);

    @media (min-width: $breakpoint-value1) and (max-width: $breakpoint-value2) {
      @content;
    }
  } @else {
    @if (map-has-key($breakpoints, $breakpoint1) == false) {
      @warn 'Invalid breakpoint: #{$breakpoint1}.';
    }

    @if (map-has-key($breakpoints, $break-point2) == false) {
      @warn 'Invalid breakpoint: #{$breakpoint2}.';
    }
  }
}

@mixin respond-above($breakpoint) {
  @if (map-has-key($breakpoints, $breakpoint)) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    @media (min-width: $breakpoint-value) {
      @content;
    }
  } @else {
    @warn 'Inavlid breakpoint: #{$breakpoint}.';
  }
}

/* Element animation and transition */
@mixin showElementTransition {
  opacity: 0;
  filter: blur(5px);
  transform: translateX(-100%);
  transition: all 1s;
}

@mixin hideElementTransition {
  opacity: 1;
  filter: blur(0);
  transform: translateX(0);
}

@mixin staggeringTransition {
  .services:nth-child(2) {
    transition-delay:  200ms;
  }

  .services:nth-child(3) {
    transition-delay:  400ms;
  }
}
